FeeHook_SwapExactETHForTokens_Unit_Concrete_Test
├── When the contract is not launched
│   └── It should revert with "NotLaunched".
│       ├── Because swaps cannot happen before launch.
│       └── Because launch enables trading operations.
├── When the sender is blacklisted
│   └── It should revert with "BlacklistedUser".
│       ├── Because blacklisted users are restricted from swapping.
│       └── Because security measures prevent flagged accounts from trading.
├── When the sender is subject to a cooldown period
│   ├── When cooldowns are enabled
│   │   ├── When the sender has swapped recently
│   │   │   └── It should revert with "CooldownActive".
│   │   │       ├── Because cooldown enforcement prevents rapid consecutive trades.
│   │   │       └── Because the user must wait before swapping again.
│   │   └── When the sender has not swapped recently
│   │       ├── It should allow the swap.
│   │       │   └── Because the cooldown period has passed.
│   │       └── It should update {userLastTransactionBlock}.
│   │           └── Because the contract must track the latest swap block.
├── When trade limits are enabled
│   ├── When the swap amount exceeds the max buy limit
│   │   └── It should revert with "MaxBuyExceeded".
│   │       ├── Because the user cannot buy more than {maxBuyAmount}.
│   │       └── Because enforced limits restrict large purchases.
│   ├── When the swap amount exceeds the max sell limit
│   │   └── It should revert with "MaxSellExceeded".
│   │       ├── Because the user cannot sell more than {maxSellAmount}.
│   │       └── Because enforced limits restrict large sell orders.
│   ├── When the swap would exceed the max wallet limit
│   │   └── It should revert with "MaxWalletExceeded".
│   │       ├── Because the user cannot hold more than {maxWalletAmount}.
│   │       └── Because enforced limits restrict wallet balances.
├── When trade limits are disabled
│   ├── It should allow the swap.
│   │   ├── Because trade limits are not enforced.
├── When the sender is exempt from trade limits
│   └── It should allow the swap.
│       └── Because {isExcludedFromTradeLimits[sender]} is true.
├── When the sender is exempt from fees
│   ├── It should process the swap without fees.
│   │   └── Because excluded addresses should not pay swap fees.
│   └── It should not emit a {HookFee} event.
│       └── Because no fees are collected.
├── When fees are globally disabled
│   ├── It should process the swap without fees.
│   │   └── Because {isFeeEnabled} is false.
│   └── It should not emit a {HookFee} event.
│       └── Because fees are not applied.
├── When fees are enabled and the sender is not exempt
│   ├── It should apply the buy fee.
│   │   └── Because fees should be deducted from the swapped amount.
│   ├── It should deduct the correct fee amount based on {buyFeeBips}.
│   │   └── Because the fee percentage should be applied correctly.
│   ├── It should apply the sell fee when applicable.
│   │   └── Because fees should be deducted from sell transactions.
│   └── It should emit a {HookFee} event.
│       └── Because fee collection must be logged.
└── When the swap is successful
    ├── It should deduct ETH from the sender.
    │   └── Because the user is spending ETH to buy tokens.
    ├── It should credit the correct token amount to the sender.
    │   └── Because the user is receiving the swapped tokens.
    ├── It should update the pool balances correctly.
    │   └── Because the pool must reflect the updated liquidity.
    └── It should emit a {Swap} event.
        └── Because swaps must be logged for tracking.