FeeHook_SwapExactETHForTokens_Unit_Concrete_Test
└── When contract is not launched
    └── It should revert.
        ├── Because swaps cannot happen before launch.
        └── And it should revert with "NotLaunched".
└── When sender is blacklisted
    └── It should revert.
        ├── Because blacklisted users cannot swap.
        └── And it should revert with "BlacklistedUser".
└── When sender is subject to a cooldown period
    └── When cooldowns are enabled
        ├── When sender has swapped recently
        │   └── It should revert.
        │       ├── Because cooldown enforcement should block rapid trades.
        │       └── And it should revert with "CooldownActive".
        └── When sender has not swapped recently
            ├── It should allow the swap.
            │   └── Because cooldown conditions are met.
            └── It should update the {userLastTransactionBlock}.
                └── Because cooldown tracking should be updated.
└── When swap amount exceeds max buy limit
    └── When limits are enabled
        └── It should revert.
            ├── Because the user cannot buy more than {maxBuyAmount}.
            └── And it should revert with "MaxBuyExceeded".
    └── When limits are disabled
        └── It should allow the swap.
            └── Because trade limits are not enforced.
└── When swap would exceed max wallet limit
    └── When limits are enabled
        ├── When user's balance + swap amount > {maxWalletAmount}
        │   └── It should revert.
        │       ├── Because the user cannot hold more than {maxWalletAmount}.
        │       └── And it should revert with "MaxWalletExceeded".
    └── When limits are disabled
        └── It should allow the swap.
            └── Because wallet limits are not enforced.
└── When sender is exempt from limits
    └── It should allow the swap.
        └── Because {isExcludedFromLimits[sender]} is true.
└── When sender is exempt from fees
    ├── It should process the swap without fees.
    │   └── Because excluded addresses should not pay swap fees.
    └── It should not emit a {HookFee} event.
        └── Because no fees are collected.
└── When fees are globally disabled
    ├── It should process the swap without fees.
    │   └── Because {isFeeEnabled} is false.
    └── It should not emit a {HookFee} event.
        └── Because fees are not applied.
└── When fees are enabled and sender is not exempt
    ├── It should apply the buy fee.
    │   └── Because fees should be deducted from the swapped amount.
    ├── It should deduct the correct fee amount based on {buyFeeBips}.
    │   └── Because the fee percentage should be applied correctly.
    └── It should emit a {HookFee} event.
        └── Because fee collection must be logged.
└── When swap is successful
    ├── It should deduct ETH from sender.
    │   └── Because the user is spending ETH to buy tokens.
    ├── It should credit the correct token amount to sender.
    │   └── Because the user is receiving the swapped tokens.
    ├── It should update the pool balances correctly.
    │   └── Because the pool needs to reflect the updated liquidity.
    └── It should emit a {Swap} event.
        └── Because swaps must be logged for tracking.